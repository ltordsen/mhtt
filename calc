#!/usr/bin/env python

"""
Calculate TT results.
Note: This isn't fully-tested with python 2.  I'd use python3.
"""
import argparse
import copy
import csv
import os
import re
import sys
import time as time_module

from utils.common import nsecs,fmt_time_from_txt,secs2text

from pprint import pprint

def get_club_people(club_file_path):
    """ Read a simple textfile of names of club members.  Return a list"""
    if not os.path.exists(club_file_path):
        sys.stderr.write("Couldn't find %s\n" % club_file_path)
        sys.exit(1)

    with open(club_file_path, 'r') as fh:
        peeps = fh.read().splitlines()

    return peeps

##########################
# Per Aaron -- time regular expressions
# """
# Match something like 1:09:
# Find: ([0-9]{1}):([0-9]{2})
# Replace with: 00:0$1:$2

# Match something like 10:52:
# Find: ([0-9]{2}):([0-9]{2})
# Replace with: 00:$1:$2
def get_segment_results(args):
    """Read a csv (specified in args) of segment results, and format it."""
    segment_results = dict()
    club_people = get_club_people(args.club)
    all_people = set()

    # I don't think we need to worry about an 'hh:mm:ss' re.  That would
    # be the ideal format anyway.
    sec_re = re.compile(r'(\d{1,2})s')
    mmss_re = re.compile(r'(\d{1,2}:\d{1,2})')

    delimiter = args.delimiter if args.delimiter else '#'

    for csv_path in args.segment_csv:
        if not os.path.exists(csv_path):
            sys.stderr.write("Couldn't find %s\n" % csv_path)
            sys.exit(1)

        segname = os.path.basename(csv_path).replace('.csv', '')

        with open(csv_path) as csvh:
            contents = csv.reader(csvh, delimiter=delimiter)

            for row in contents:
                try:
                    rank, name, date, speed, hr, power, time = \
                    row[0], row[1], row[2], row[3], row[4], row[5], row[6]

                except IndexError:
                    # Shouldn't hit this unless the strava format changes or
                    # there was a copy/paste error when making the csv.
                    sys.stderr.write("WARNING: couldn't process row=%s\n" % row)
                    continue
                if rank == 'Rank':
                    # Skip the first/header row.
                    continue
                elif name not in club_people:
                    sys.stderr.write("Skipping %s -- not in club\n" % name)
                    continue

                formatted_time = fmt_time_from_txt(time)

                if segname in segment_results:
                    segment_results[segname][name] = {
                        'rank': rank, 'date': date,
                        'hr': hr, 'power': power,
                        'time': formatted_time, 'speed': speed
                    }
                else:
                     segment_results[segname] = {name: {
                        'rank': rank, 'date': date,
                        'hr': hr, 'power': power,
                        'time': formatted_time, 'speed': speed
                    }}
                all_people.add(name)

    return segment_results, all_people

def add_times(sr, all_people):
    """Add the times for all people over all the segments"""

    person_results = dict()

    # Need to account for people missing a segment.  There might be a better
    # way to do this.
    sr_tmp = dict()
    for seg in sr:
        ranks = [int(sr[seg][p]['rank']) for p in sr[seg].keys()]
        maxrank = max(ranks) + 1 # Incase someone missed a segment
        for p in all_people:
            if p not in sr[seg].keys():
                if seg not in sr_tmp:
                    sr_tmp[seg] = dict()
                sr_tmp[seg][p] = {'rank': str(maxrank), 'date': 'N/A', 'hr': 'N/A',
                               'power':'N/A', 'time':'N/A', 'speed': 'N/A'}

    # Now copy sr_tmp into sr.
    for seg in sr_tmp:
        for person in sr_tmp[seg]:
            sr[seg][person] = copy.deepcopy(sr_tmp[seg][person])

    # Calculate rank, and organize the results by person.
    for person in all_people:
        total_time = 0
        nsegs = float(len(sr.keys()))
        rank_avg = 0.0
        person_results[person] = dict()
        for seg in sr:
            ranks = [int(sr[seg][p]['rank']) for p in sr[seg].keys()]
            time = sr[seg][person]['time']
            if sr[seg][person]['time'] != 'N/A':
                total_time += nsecs(time)
            rank_avg += float(sr[seg][person]['rank'])/nsegs
            person_results[person][seg] = \
                {'time': time, 'time_secs': nsecs(time),
                 'rank': sr[seg][p]['rank'], 'date': sr[seg][person]['date']}

        strtime = secs2text(total_time)
        person_results[person]['total_time'] = strtime
        person_results[person]['rank_avg'] = rank_avg

    return person_results

def main():
    parser = argparse.ArgumentParser('Calculate results')
    parser.add_argument("club", help="a text file with a list of group members")
    parser.add_argument('segment_csv', nargs='+')
    parser.add_argument('-d', '--delimiter', action="store")
    parser.add_argument('-s', '--score', action="store_true")
    parser.add_argument('-o', '--outfile', action="store")
    args = parser.parse_args()
    sr, people = get_segment_results(args)
    person_results = add_times(sr, people)

    # We could get rid of the score option,  delete the column from the csv (when necessary),
    # and get rid of the 'if args.score' logic.

    delimiter = args.delimiter if args.delimiter else '#'

    # Print to an outfile if specified.
    fh = None
    if args.outfile:
       fh = open(args.outfile, 'w')
       sys.stdout = fh

    if args.score:
        line = delimiter.join(["Name"] + list(sr.keys()) + ["Total Time", "Rank Avg"])
    else:
        line = delimiter.join(["Name"] + list(sr.keys()) + ["Total Time"])
    print(line)

    for pr in person_results:
        # Check dates for each segment.  All segments need to be completed on the same day.
        dates = set([person_results[pr][s]['date'] for s in sr])
        if len(dates) != 1:
            sys.stderr.write("WARNING: %s has inconsistant dates:%s\n" % (
                              pr, dates))
        if args.score:
            line = delimiter.join([pr] +
                                  [person_results[pr][s]['time'] for s in sr] +
                                  [person_results[pr]['total_time'], "%.2f" % person_results[pr]['rank_avg']])
        else:
            line = delimiter.join([pr] + [person_results[pr][s]['time'] for s in sr] +
                                  [person_results[pr]['total_time']])
        print(line)

    if fh:
        fh.close()

if __name__ == "__main__":
    main()
